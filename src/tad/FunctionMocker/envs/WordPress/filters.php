<?php
/**
 * WordPress environment filters.
 *
 * @package Test\Environments
 * @subpackage WordPress
 * @author Luca Tumedei <luca@theaveragedev.com>
 * @copyright 2018 Luca Tumedei
 *
 * @generated by function-mocker environment generation tool on 2018-08-18 09:02:29 (Europe/Berlin)
 * @link https://github.com/lucatume/function-mocker
 */

if (!function_exists('apply_filters')) {

	/**
	 * Call the functions added to a filter hook.
	 *
	 * The callback functions attached to filter hook $tag are invoked by calling
	 * this function. This function can be used to create a new filter hook by
	 * simply calling this function with the name of the new hook specified using
	 * the $tag parameter.
	 *
	 * The function allows for additional arguments to be added and passed to hooks.
	 *
	 *     // Our filter callback function
	 *     function example_callback( $string, $arg1, $arg2 ) {
	 *         // (maybe) modify $string
	 *         return $string;
	 *     }
	 *     add_filter( 'example_filter', 'example_callback', 10, 3 );
	 *
	 *     /*
	 *      * Apply the filters by calling the 'example_callback' function we
	 *      * "hooked" to 'example_filter' using the add_filter() function above.
	 *      * - 'example_filter' is the filter hook $tag
	 *      * - 'filter me' is the value being filtered
	 *      * - $arg1 and $arg2 are the additional arguments passed to the callback.
	 *     $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );
	 *
	 * @since 0.71
	 *
	 * @global array $wp_filter         Stores all of the filters.
	 * @global array $wp_current_filter Stores the list of current filters with the current one last.
	 *
	 * @param string $tag     The name of the filter hook.
	 * @param mixed  $value   The value on which the filters hooked to `$tag` are applied on.
	 * @param mixed  $var,... Additional variables passed to the functions hooked to `$tag`.
	 * @return mixed The filtered value after all hooked functions are applied to it.
	 */
	function apply_filters($tag, $value) {
		global $wp_filter, $wp_current_filter;
		$args = array();
		// Do 'all' actions first.
		if (isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
			$args = func_get_args();
			_wp_call_all_hook($args);
		}

		if (!isset($wp_filter[$tag])) {
			if (isset($wp_filter['all'])) {
				array_pop($wp_current_filter);
			}

			return $value;
		}

		if (!isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
		}

		if (empty($args)) {
			$args = func_get_args();
		}

		// don't pass the tag name to WP_Hook
		array_shift($args);
		$filtered = $wp_filter[$tag]->apply_filters($value, $args);
		array_pop($wp_current_filter);
		return $filtered;
	}

}

if (!function_exists('apply_filters_ref_array')) {

	/**
	 * Execute functions hooked on a specific filter hook, specifying arguments in an array.
	 *
	 * @since 3.0.0
	 *
	 * @see apply_filters() This function is identical, but the arguments passed to the
	 * functions hooked to `$tag` are supplied using an array.
	 *
	 * @global array $wp_filter         Stores all of the filters
	 * @global array $wp_current_filter Stores the list of current filters with the current one last
	 *
	 * @param string $tag  The name of the filter hook.
	 * @param array  $args The arguments supplied to the functions hooked to $tag.
	 * @return mixed The filtered value after all hooked functions are applied to it.
	 */
	function apply_filters_ref_array($tag, $args) {
		global $wp_filter, $wp_current_filter;
		// Do 'all' actions first
		if (isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
			$all_args = func_get_args();
			_wp_call_all_hook($all_args);
		}

		if (!isset($wp_filter[$tag])) {
			if (isset($wp_filter['all'])) {
				array_pop($wp_current_filter);
			}

			return $args[0];
		}

		if (!isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
		}

		$filtered = $wp_filter[$tag]->apply_filters($args[0], $args);
		array_pop($wp_current_filter);
		return $filtered;
	}

}

if (!function_exists('current_filter')) {

	/**
	 * Retrieve the name of the current filter or action.
	 *
	 * @since 2.5.0
	 *
	 * @global array $wp_current_filter Stores the list of current filters with the current one last
	 *
	 * @return string Hook name of the current filter or action.
	 */
	function current_filter() {
		global $wp_current_filter;
		return end($wp_current_filter);
	}

}

if (!function_exists('doing_action')) {

	/**
	 * Retrieve the name of an action currently being processed.
	 *
	 * @since 3.9.0
	 *
	 * @param string|null $action Optional. Action to check. Defaults to null, which checks
	 *                            if any action is currently being run.
	 * @return bool Whether the action is currently in the stack.
	 */
	function doing_action($action = null) {
		return doing_filter($action);
	}

}

if (!function_exists('add_action')) {

	/**
	 * Hooks a function on to a specific action.
	 *
	 * Actions are the hooks that the WordPress core launches at specific points
	 * during execution, or when specific events occur. Plugins can specify that
	 * one or more of its PHP functions are executed at these points, using the
	 * Action API.
	 *
	 * @since 1.2.0
	 *
	 * @param string   $tag             The name of the action to which the $function_to_add is hooked.
	 * @param callable $function_to_add The name of the function you wish to be called.
	 * @param int      $priority        Optional. Used to specify the order in which the functions
	 *                                  associated with a particular action are executed. Default 10.
	 *                                  Lower numbers correspond with earlier execution,
	 *                                  and functions with the same priority are executed
	 *                                  in the order in which they were added to the action.
	 * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.
	 * @return true Will always return true.
	 */
	function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {
		return add_filter($tag, $function_to_add, $priority, $accepted_args);
	}

}

if (!function_exists('do_action')) {

	/**
	 * Execute functions hooked on a specific action hook.
	 *
	 * This function invokes all functions attached to action hook `$tag`. It is
	 * possible to create new action hooks by simply calling this function,
	 * specifying the name of the new hook using the `$tag` parameter.
	 *
	 * You can pass extra arguments to the hooks, much like you can with apply_filters().
	 *
	 * @since 1.2.0
	 *
	 * @global array $wp_filter         Stores all of the filters
	 * @global array $wp_actions        Increments the amount of times action was triggered.
	 * @global array $wp_current_filter Stores the list of current filters with the current one last
	 *
	 * @param string $tag     The name of the action to be executed.
	 * @param mixed  $arg,... Optional. Additional arguments which are passed on to the
	 *                        functions hooked to the action. Default empty.
	 */
	function do_action($tag, $arg = '') {
		global $wp_filter, $wp_actions, $wp_current_filter;
		if (!isset($wp_actions[$tag])) {
			$wp_actions[$tag] = 1;
		} else {
			++$wp_actions[$tag];
		}

		// Do 'all' actions first
		if (isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
			$all_args = func_get_args();
			_wp_call_all_hook($all_args);
		}

		if (!isset($wp_filter[$tag])) {
			if (isset($wp_filter['all'])) {
				array_pop($wp_current_filter);
			}

			return;
		}

		if (!isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
		}

		$args = array();
		if (is_array($arg) && 1 == count($arg) && isset($arg[0]) && is_object($arg[0])) {
			// array(&$this)
			$args[] =& $arg[0];
		} else {
			$args[] = $arg;
		}

		for ($a = 2, $num = func_num_args(); $a < $num; $a++) {
			$args[] = func_get_arg($a);
		}

		$wp_filter[$tag]->do_action($args);
		array_pop($wp_current_filter);
	}

}

if (!function_exists('did_action')) {

	/**
	 * Retrieve the number of times an action is fired.
	 *
	 * @since 2.1.0
	 *
	 * @global array $wp_actions Increments the amount of times action was triggered.
	 *
	 * @param string $tag The name of the action hook.
	 * @return int The number of times action hook $tag is fired.
	 */
	function did_action($tag) {
		global $wp_actions;
		if (!isset($wp_actions[$tag])) {
			return 0;
		}

		return $wp_actions[$tag];
	}

}

if (!function_exists('do_action_ref_array')) {

	/**
	 * Execute functions hooked on a specific action hook, specifying arguments in an array.
	 *
	 * @since 2.1.0
	 *
	 * @see do_action() This function is identical, but the arguments passed to the
	 *                  functions hooked to $tag< are supplied using an array.
	 * @global array $wp_filter         Stores all of the filters
	 * @global array $wp_actions        Increments the amount of times action was triggered.
	 * @global array $wp_current_filter Stores the list of current filters with the current one last
	 *
	 * @param string $tag  The name of the action to be executed.
	 * @param array  $args The arguments supplied to the functions hooked to `$tag`.
	 */
	function do_action_ref_array($tag, $args) {
		global $wp_filter, $wp_actions, $wp_current_filter;
		if (!isset($wp_actions[$tag])) {
			$wp_actions[$tag] = 1;
		} else {
			++$wp_actions[$tag];
		}

		// Do 'all' actions first
		if (isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
			$all_args = func_get_args();
			_wp_call_all_hook($all_args);
		}

		if (!isset($wp_filter[$tag])) {
			if (isset($wp_filter['all'])) {
				array_pop($wp_current_filter);
			}

			return;
		}

		if (!isset($wp_filter['all'])) {
			$wp_current_filter[] = $tag;
		}

		$wp_filter[$tag]->do_action($args);
		array_pop($wp_current_filter);
	}

}

if (!function_exists('has_action')) {

	/**
	 * Check if any action has been registered for a hook.
	 *
	 * @since 2.5.0
	 *
	 * @see has_filter() has_action() is an alias of has_filter().
	 *
	 * @param string        $tag               The name of the action hook.
	 * @param callable|bool $function_to_check Optional. The callback to check for. Default false.
	 * @return bool|int If $function_to_check is omitted, returns boolean for whether the hook has
	 *                  anything registered. When checking a specific function, the priority of that
	 *                  hook is returned, or false if the function is not attached. When using the
	 *                  $function_to_check argument, this function may return a non-boolean value
	 *                  that evaluates to false (e.g.) 0, so use the === operator for testing the
	 *                  return value.
	 */
	function has_action($tag, $function_to_check = false) {
		return has_filter($tag, $function_to_check);
	}

}

if (!function_exists('remove_action')) {

	/**
	 * Removes a function from a specified action hook.
	 *
	 * This function removes a function attached to a specified action hook. This
	 * method can be used to remove default functions attached to a specific filter
	 * hook and possibly replace them with a substitute.
	 *
	 * @since 1.2.0
	 *
	 * @param string   $tag                The action hook to which the function to be removed is hooked.
	 * @param callable $function_to_remove The name of the function which should be removed.
	 * @param int      $priority           Optional. The priority of the function. Default 10.
	 * @return bool Whether the function is removed.
	 */
	function remove_action($tag, $function_to_remove, $priority = 10) {
		return remove_filter($tag, $function_to_remove, $priority);
	}

}
