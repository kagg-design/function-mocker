<?php

/**
 * wordpress environment functions
 *
 * @generated by function-mocker environment generation tool on 2018-08-16 16:14:45 (UTC)
 * @link https://github.com/lucatume/function-mocker
 */

if (!function_exists('wp_list_pluck')) {
    /**
     * Pluck a certain field out of each object in a list.
     *
     * This has the same functionality and prototype of
     * array_column() (PHP 5.5) but also supports objects.
     *
     * @since 3.1.0
     * @since 4.0.0 $index_key parameter added.
     * @since 4.7.0 Uses `WP_List_Util` class.
     *
     * @param array      $list      List of objects or arrays
     * @param int|string $field     Field from the object to place instead of the entire object
     * @param int|string $index_key Optional. Field from the object to use as keys for the new array.
     *                              Default null.
     * @return array Array of found values. If `$index_key` is set, an array of found values with keys
     *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original
     *               `$list` will be preserved in the results.
     */
    function wp_list_pluck($list, $field, $index_key = null)
    {
        $util = new WP_List_Util($list);
        return $util->pluck($field, $index_key);
    }
}

if (!function_exists('__return_true')) {
    /**
     * Returns true.
     *
     * Useful for returning true to filters easily.
     *
     * @since 3.0.0
     *
     * @see __return_false()
     *
     * @return true True.
     */
    function __return_true()
    {
        return true;
    }
}

if (!function_exists('__return_false')) {
    /**
     * Returns false.
     *
     * Useful for returning false to filters easily.
     *
     * @since 3.0.0
     *
     * @see __return_true()
     *
     * @return false False.
     */
    function __return_false()
    {
        return false;
    }
}

if (!function_exists('__return_zero')) {
    /**
     * Returns 0.
     *
     * Useful for returning 0 to filters easily.
     *
     * @since 3.0.0
     *
     * @return int 0.
     */
    function __return_zero()
    {
        return 0;
    }
}

if (!function_exists('__return_empty_array')) {
    /**
     * Returns an empty array.
     *
     * Useful for returning an empty array to filters easily.
     *
     * @since 3.0.0
     *
     * @return array Empty array.
     */
    function __return_empty_array()
    {
        return array();
    }
}

if (!function_exists('__return_null')) {
    /**
     * Returns null.
     *
     * Useful for returning null to filters easily.
     *
     * @since 3.4.0
     *
     * @return null Null value.
     */
    function __return_null()
    {
        return null;
    }
}

if (!function_exists('__return_empty_string')) {
    /**
     * Returns an empty string.
     *
     * Useful for returning an empty string to filters easily.
     *
     * @since 3.7.0
     *
     * @see __return_null()
     *
     * @return string Empty string.
     */
    function __return_empty_string()
    {
        return '';
    }
}

if (!function_exists('trailingslashit')) {
    /**
     * Appends a trailing slash.
     *
     * Will remove trailing forward and backslashes if it exists already before adding
     * a trailing forward slash. This prevents double slashing a string or path.
     *
     * The primary use of this is for paths and thus should be used for paths. It is
     * not restricted to paths and offers no specific path support.
     *
     * @since 1.2.0
     *
     * @param string $string What to add the trailing slash to.
     * @return string String with trailing slash added.
     */
    function trailingslashit($string)
    {
        return untrailingslashit($string) . '/';
    }
}

